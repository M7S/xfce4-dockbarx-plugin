/* libxfce4ui-2.vapi generated by vapigen-0.48, do not modify. */

[CCode (cprefix = "Xfce", gir_namespace = "libxfce4ui", gir_version = "2.0", lower_case_cprefix = "xfce_")]
namespace Xfce {
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", type_id = "xfce_filename_input_get_type ()")]
	public class FilenameInput : Gtk.Box, Atk.Implementor, Gtk.Buildable, Gtk.Orientable {
		[CCode (has_construct_function = false)]
		protected FilenameInput ();
		[Version (since = "4.16")]
		public void check ();
		[Version (since = "4.16")]
		public static void desensitise_widget (Gtk.Widget widget);
		[Version (since = "4.16")]
		public unowned Gtk.Entry get_entry ();
		[Version (since = "4.16")]
		public unowned string get_text ();
		[Version (since = "4.16")]
		public static void sensitise_widget (Gtk.Widget widget);
		[NoAccessorMethod]
		[Version (since = "4.16")]
		public int max_text_length { construct; }
		[NoAccessorMethod]
		[Version (since = "4.16")]
		public string original_filename { construct; }
		[Version (since = "4.16")]
		public signal void text_invalid ();
		[Version (since = "4.16")]
		public signal void text_valid ();
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", type_id = "xfce_sm_client_get_type ()")]
	public class SMClient : GLib.Object {
		[CCode (has_construct_function = false)]
		protected SMClient ();
		public bool connect () throws GLib.Error;
		public void disconnect ();
		public static GLib.Quark error_quark ();
		[CCode (cname = "xfce_sm_client_get", has_construct_function = false)]
		public SMClient.@get ();
		public unowned string get_client_id ();
		public unowned string get_current_directory ();
		[CCode (cname = "xfce_sm_client_get_full", has_construct_function = false)]
		public SMClient.get_full (Xfce.SMClientRestartStyle restart_style, uint8 priority, string resumed_client_id, string current_directory, string restart_command, string desktop_file);
		public static GLib.OptionGroup get_option_group (int argc, string argv);
		public uint8 get_priority ();
		[CCode (array_length = false, array_null_terminated = true)]
		public unowned string[] get_restart_command ();
		public Xfce.SMClientRestartStyle get_restart_style ();
		public unowned string get_state_file ();
		[CCode (cname = "xfce_sm_client_get_with_argv", has_construct_function = false)]
		public SMClient.get_with_argv (int argc, string argv, Xfce.SMClientRestartStyle restart_style, uint8 priority);
		public bool is_connected ();
		public bool is_resumed ();
		public void request_shutdown (Xfce.SMClientShutdownHint shutdown_hint);
		public void set_current_directory (string current_directory);
		public void set_desktop_file (string desktop_file);
		public void set_priority (uint8 priority);
		public void set_restart_command (string restart_command);
		public void set_restart_style (Xfce.SMClientRestartStyle restart_style);
		[NoAccessorMethod]
		public int argc { construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] argv { construct; }
		public string client_id { get; construct; }
		public string current_directory { get; set; }
		[NoAccessorMethod]
		public string desktop_file { owned get; set; }
		public uint8 priority { get; set construct; }
		[CCode (array_length = false, array_null_terminated = true)]
		public string[] restart_command { get; set; }
		public Xfce.SMClientRestartStyle restart_style { get; set construct; }
		[NoAccessorMethod]
		public bool resumed { get; }
		public signal void quit ();
		public signal void quit_cancelled ();
		public signal bool quit_requested ();
		public signal void save_state ();
		public signal void save_state_extended ();
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", type_id = "xfce_titled_dialog_get_type ()")]
	public class TitledDialog : Gtk.Dialog, Atk.Implementor, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public TitledDialog ();
		[Version (since = "4.16")]
		public void add_action_widget (Gtk.Widget child, int response_id);
		[Version (since = "4.16")]
		public unowned Gtk.Widget add_button (string button_text, int response_id);
		[Version (since = "4.16")]
		public void create_action_area ();
		public unowned string get_subtitle ();
		[Version (since = "4.16")]
		public void set_default_response (int response_id);
		public void set_subtitle (string subtitle);
		public string subtitle { get; set; }
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", has_type_id = false)]
	public struct GtkActionEntry {
		public uint id;
		public weak string accel_path;
		public weak string default_accelerator;
		public Xfce.GtkMenuItem menu_item_type;
		public weak string menu_item_label_text;
		public weak string menu_item_tooltip_text;
		public weak string menu_item_icon_name;
		public weak GLib.Callback callback;
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cprefix = "XFCE_GTK_", has_type_id = false)]
	public enum GtkMenuItem {
		MENU_ITEM,
		IMAGE_MENU_ITEM,
		CHECK_MENU_ITEM,
		RADIO_MENU_ITEM;
		[Version (since = "4.16")]
		public static Gtk.Widget @new (string label_text, string tooltip_text, string accel_path, GLib.Callback callback, GLib.Object callback_param, Gtk.MenuShell menu_to_append_item);
		[Version (since = "4.16")]
		public static Gtk.Widget new_from_action_entry (Xfce.GtkActionEntry action_entry, GLib.Object callback_param, Gtk.MenuShell menu_to_append_item);
		[Version (since = "4.16")]
		public static void set_accel_label (Gtk.MenuItem menu_item, string accel_path);
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cprefix = "XFCE_SM_CLIENT_PRIORITY_", has_type_id = false)]
	public enum SMClientPriority {
		HIGHEST,
		WM,
		CORE,
		DESKTOP,
		DEFAULT,
		LOWEST
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cprefix = "XFCE_SM_CLIENT_RESTART_", type_id = "xfce_sm_client_restart_style_get_type ()")]
	public enum SMClientRestartStyle {
		NORMAL,
		IMMEDIATELY
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cprefix = "XFCE_SM_CLIENT_SHUTDOWN_HINT_", type_id = "xfce_sm_client_shutdown_hint_get_type ()")]
	public enum SMClientShutdownHint {
		ASK,
		LOGOUT,
		HALT,
		REBOOT
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cname = "XfceSmCLientErrorEnum", cprefix = "XFCE_SM_CLIENT_ERROR_", type_id = "xfce_sm_client_error_enum_get_type ()")]
	[GIR (name = "SmCLientErrorEnum")]
	public enum SmCLientError {
		FAILED,
		INVALID_CLIENT
	}
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cname = "XFCE_BUTTON_TYPE_MIXED")]
	public const string BUTTON_TYPE_MIXED;
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h", cname = "XFCE_BUTTON_TYPE_PIXBUF")]
	public const string BUTTON_TYPE_PIXBUF;
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static int dialog_confirm_close_tabs (Gtk.Window? parent, int num_tabs, bool show_confirm_box, bool? confirm_box_checked);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.10")]
	public static void dialog_show_help (Gtk.Window? parent, string? component, string? page, string? offset);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.12")]
	public static void dialog_show_help_with_version (Gtk.Window? parent, string? component, string? page, string? offset, string? version);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static Gdk.Screen gdk_screen_get_active (out int monitor_return);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.14")]
	public static Gdk.Rectangle? gdk_screen_get_geometry ();
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static GLib.Icon gicon_from_name (string name);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static void gtk_accel_group_connect_action_entries (Gtk.AccelGroup accel_group, Xfce.GtkActionEntry action_entries, uint n_action_entries, void* callback_data);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static void gtk_accel_group_disconnect_action_entries (Gtk.AccelGroup accel_group, Xfce.GtkActionEntry action_entries, uint n_action_entries);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static void gtk_accel_map_add_entries (Xfce.GtkActionEntry action_entries, uint n_action_entries);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static Gtk.Widget gtk_button_new_mixed (string stock_id, string label);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_check_menu_item_new (string label_text, string tooltip_text, string accel_path, GLib.Callback callback, GLib.Object callback_param, bool active, Gtk.MenuShell menu_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static Gtk.Widget gtk_frame_box_new (string label, out Gtk.Widget container_return);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static Gtk.Widget gtk_frame_box_new_with_content (string label, Gtk.Widget content);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static unowned Xfce.GtkActionEntry? gtk_get_action_entry_by_id (Xfce.GtkActionEntry action_entries, uint n_action_entries, uint id);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_image_menu_item_new (string label_text, string tooltip_text, string accel_path, GLib.Callback callback, GLib.Object callback_param, Gtk.Widget image, Gtk.MenuShell menu_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_image_menu_item_new_from_icon_name (string label_text, string tooltip_text, string accel_path, GLib.Callback callback, GLib.Object callback_param, string icon_name, Gtk.MenuShell menu_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static void gtk_menu_append_seperator (Gtk.MenuShell menu);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.14")]
	public static bool gtk_menu_popup_until_mapped (Gtk.Menu menu, Gtk.Widget? parent_menu_shell, Gtk.Widget? parent_menu_item, [CCode (delegate_target_pos = 4.5)] Gtk.MenuPositionFunc? func, uint button, uint32 activate_time);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_radio_menu_item_new (string label_text, string tooltip_text, string accel_path, GLib.Callback callback, GLib.Object callback_param, bool active, Gtk.MenuShell menu_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_toggle_menu_item_new_from_action_entry (Xfce.GtkActionEntry action_entry, GLib.Object callback_param, bool active, Gtk.MenuShell menu_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static Gtk.Widget gtk_tool_button_new_from_action_entry (Xfce.GtkActionEntry action_entry, GLib.Object callback_param, Gtk.Toolbar toolbar_to_append_item);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static void gtk_translate_action_entries (Xfce.GtkActionEntry action_entries, uint n_action_entries);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static void gtk_window_center_on_active_screen (Gtk.Window window);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.16")]
	public static unowned string icon_name_from_desktop_id (string desktop_id);
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static bool spawn_command_line_on_screen (Gdk.Screen? screen, string command_line, bool in_terminal, bool startup_notify) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static bool spawn_on_screen (Gdk.Screen? screen, string? working_directory, string argv, string? envp, GLib.SpawnFlags flags, bool startup_notify, uint32 startup_timestamp, string? startup_icon_name) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	public static bool spawn_on_screen_with_child_watch (Gdk.Screen? screen, string? working_directory, string argv, string? envp, GLib.SpawnFlags flags, bool startup_notify, uint32 startup_timestamp, string? startup_icon_name, GLib.Closure? child_watch_closure) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4ui/libxfce4ui.h")]
	[Version (since = "4.14")]
	public static bool widget_reparent (Gtk.Widget widget, Gtk.Widget new_parent);
}
