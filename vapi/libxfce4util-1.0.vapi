/* libxfce4util-1.0.vapi generated by vapigen-0.48, do not modify. */

[CCode (cprefix = "Xfce", gir_namespace = "libxfce4util", gir_version = "1.0", lower_case_cprefix = "xfce_")]
namespace Xfce {
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", type_id = "xfce_kiosk_get_type ()")]
	public class Kiosk : GLib.Object {
		[CCode (has_construct_function = false)]
		[Version (since = "4.2")]
		public Kiosk (string module);
		[Version (since = "4.2")]
		public void free ();
		[Version (since = "4.2")]
		public bool query (string capability);
	}
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "xfce_rc_get_type ()")]
	[Compact]
	public class Rc {
		[Version (since = "4.2")]
		public void close ();
		[Version (since = "4.2")]
		public static Xfce.Rc config_open (Xfce.ResourceType type, string resource, bool readonly);
		[Version (since = "4.2")]
		public void delete_entry (string key, bool global);
		[Version (since = "4.2")]
		public void delete_group (string group, bool global);
		[Version (since = "4.2")]
		public void flush ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "4.2")]
		public string[] get_entries (string group);
		[Version (since = "4.2")]
		public unowned string get_group ();
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "4.2")]
		public string[] get_groups ();
		[Version (since = "4.2")]
		public unowned string get_locale ();
		[Version (since = "4.2")]
		public bool has_entry (string key);
		[Version (since = "4.2")]
		public bool has_group (string group);
		[Version (since = "4.2")]
		public bool is_dirty ();
		[Version (since = "4.2")]
		public bool is_readonly ();
		[Version (since = "4.2")]
		public bool read_bool_entry (string key, bool fallback);
		[Version (since = "4.2")]
		public unowned string read_entry (string key, string fallback);
		[Version (since = "4.2")]
		public unowned string read_entry_untranslated (string key, string fallback);
		[Version (since = "4.2")]
		public int read_int_entry (string key, int fallback);
		[CCode (array_length = false, array_null_terminated = true)]
		[Version (since = "4.2")]
		public string[] read_list_entry (string key, string delimiter);
		[Version (since = "4.2")]
		public void rollback ();
		[Version (since = "4.2")]
		public void set_group (string group);
		[Version (since = "4.2")]
		public static Xfce.Rc simple_open (string filename, bool readonly);
		[Version (since = "4.2")]
		public void write_bool_entry (string key, bool value);
		[Version (since = "4.2")]
		public void write_entry (string key, string value);
		[Version (since = "4.2")]
		public void write_int_entry (string key, int value);
		[Version (since = "4.2")]
		public void write_list_entry (string key, string value, string separator);
	}
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", cprefix = "XFCE_LICENSE_TEXT_", has_type_id = false)]
	public enum LicenseTextType {
		BSD,
		GPL,
		LGPL
	}
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", cprefix = "XFCE_RESOURCE_", has_type_id = false)]
	public enum ResourceType {
		DATA,
		CONFIG,
		CACHE,
		ICONS,
		THEMES
	}
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", instance_pos = 2.9)]
	public delegate bool MatchFunc (string basedir, string relpath);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", instance_pos = 1.9)]
	public delegate void PosixSignalHandler (int @signal);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", cname = "XFCE_LOCALE_FULL_MATCH")]
	public const int LOCALE_FULL_MATCH;
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h", cname = "XFCE_LOCALE_NO_MATCH")]
	public const int LOCALE_NO_MATCH;
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string expand_variables (string command, string envp);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string get_dir_localized (string directory);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string get_dir_localized_r (string buffer, size_t length, string directory);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string get_file_localized (string filename);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string get_file_localized_r (string buffer, size_t length, string filename);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static unowned string get_homedir ();
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static unowned string get_license_text (Xfce.LicenseTextType license_type);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string get_path_localized (string dst, size_t size, string paths, string filename, GLib.FileTest test);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static unowned string get_userdir ();
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static string gethostname ();
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static uint locale_match (string locale1, string locale2);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static bool mkdirhier (string whole_path, ulong mode) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static bool posix_signal_handler_init () throws GLib.Error;
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static void posix_signal_handler_restore_handler (int @signal);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static bool posix_signal_handler_set_handler (int @signal, Xfce.PosixSignalHandler handler) throws GLib.Error;
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static void posix_signal_handler_shutdown ();
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string[] resource_dirs (Xfce.ResourceType type);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string resource_lookup (Xfce.ResourceType type, string filename);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string[] resource_lookup_all (Xfce.ResourceType type, string filename);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string[] resource_match (Xfce.ResourceType type, string pattern, bool unique);
	[CCode (array_length = false, array_null_terminated = true, cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string[] resource_match_custom (Xfce.ResourceType type, bool unique, Xfce.MatchFunc func);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static void resource_pop_path (Xfce.ResourceType type);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static void resource_push_path (Xfce.ResourceType type, string path);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string resource_save_location (Xfce.ResourceType type, string relpath, bool create);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	public static void textdomain (string package, string localedir, string encoding);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static string utf8_remove_controls (string str, ssize_t max_len, string end);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.3")]
	public static string utf8_strndup (string src, ssize_t max_len);
	[CCode (cheader_filename = "libxfce4util/libxfce4util.h")]
	[Version (since = "4.2")]
	public static unowned string version_string ();
}
